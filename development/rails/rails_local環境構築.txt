
##【ホストOS(windows)】####################################################################
・VirtualBoxインストール
・Vagrantインストール

#git bashで作業(vagrant sshができない為。)
mkdir -p /work/vagrant/centos-rails6.5
cd /work/vagrant/centos-rails6.5
vagrant init chef/centos-6.5

#Vagrantfileの編集
# config.vm.network "private_network", ip: "192.168.33.10" のコメントを外す。
#config.vm.network :"forwarded_port", guest: 3000, host: 3000
#を追加しなくてもよい。

#ゲストOS起動
vagrant up
#ゲストOSにログイン
vagrant ssh

#WinSCPとputtyの設定
id:vagrant
pass:vagrant

##########################################################################

##【ゲストOS】####################################################################



#リポジトリの追加
#どのリポジトリを優先的に利用するか設定するためのパッケージをインストールします。
sudo yum -y install yum-priorities
#epel
sudo yum -y localinstall http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
#remi
sudo yum -y localinstall http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
#ius Python2.7, PHP5.5、Python3.3、Git 1.8など
sudo yum -y localinstall http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-11.ius.centos6.noarch.rpm

#sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/epel.repo　←　EPELリポジトリデフォルト無効化※RPMforgeリポジトリと競合するため

#もろもろインストール
sudo yum -y groupinstall "Development Tools"
sudo yum -y install openssl-devel
sudo yum -y install libffi-devel
sudo yum -y install readline-devel
sudo yum -y install sqlite-devel
sudo yum -y install --enablerepo=epel make gcc zlib-devel openssl-devel readline-devel ncurses-devel gdbm-devel db4-devel libffi-devel tk-devel libyaml-devel

#nginx
sudo vi /etc/yum.repos.d/nginx.repo
#以下を入力
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1
#nginxインストール
sudo yum -y install nginx --enablerepo=nginx

#MySQL 5.6インストール
sudo yum -y localinstall https://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
sudo yum -y install mysql-server --enablerepo=mysql56-community
#or
#sudo yum -y install mysql mysql-devel mysql-server
sudo vi /etc/my.cnf #で[mysqld]の下に
[mysqld]
character-set-server=utf8
explicit_defaults_for_timestamp=true
default-storage-engine = InnoDB
#エラーログの確認
log-error=/var/log/mysql/error.log
#クエリログを表示
general_log=1
general_log_file=/var/log/mysql/query.log
log_output=FILE
#　バイナリログを残す日数
expire_logs_days = 2
[client]
default-character-set = utf8
[mysqldump]
default-character-set = <span class="goog_qs-tidbit goog_qs-tidbit-0">utf8
[mysql]
default-character-set = utf8
#を追加

#こんなエラーがでたら Fatal error: Can't open and lock privilege tables: Table 'mysql.user' doesn't exist
mysql_install_db --datadir=/var/lib/mysql --user=mysql

sudo service mysqld start #とりあえず起動する
sudo /etc/init.d/mysql start #とりあえず起動する
sudo service mysqld stop #停止
sudo /etc/init.d/mysql stop #停止

mysqladmin -u root password 'new-password'
mysql_secure_installation　#passwordを聞かれたら上記で入力したパスワードを入力し、以降すべてYESで再度rootのパスワードを変更する
mysql -u root -p　#で接続
mysql> status #で確認。なにを？まぁ起動してるかどうか的なやつかなぁ

#SQLiteのインストール
sudo yum -y install sqlite
sudo yum -y install sqlite-devel

#自動起動
sudo chkconfig mysqld on
sudo service mysqld start
service mysqld stop



#zshのインストール###################################
#とりあえずインストール vagrantだったら今まの手順の中でインストールしてるかも。
sudo yum -y install ncurses-devel

mkdir -p ~/work/zsh
cd ~/work/zsh
#いや、なんかうまくいかないので、yumでインストールしようと思ったけどやめた。
#sudo yum -y install zsh
#sudo yum -y remove zsh

# http://zsh.sourceforge.net/Arc/source.html
#に最新版があるらしいです。参考:http://gitpub.hatenablog.com/entry/2013/07/07/182014
wget http://downloads.sourceforge.net/project/zsh/zsh/5.0.7/zsh-5.0.7.tar.gz?r=http%3A%2F%2Fzsh.sourceforge.net%2FArc%2Fsource.html&ts=1425580779&use_mirror=jaist
#途中で止まる？けどEnter

#解凍・インストール　参考：http://memo.yomukaku.net/entries/jDqwgQQ
tar zxvf zsh-5.0.7.tar.gz
cd zsh-5.0.7
./configure
make
sudo make install

#oh-my-zshのインストール
cd ~
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp .oh-my-zsh/templates/zshrc.zsh-template .zshrc

#現在インストールされているシェルを確認
cat /etc/shells

#ログイン・シェルでzshを利用できるようにするために、/etc/shellsの最終行に以下のように/usr/local/bin/zshを追加します。
sudo vi /etc/shells
↓みたいな感じで
/bin/sh
/bin/bash
/sbin/nologin
/bin/tcsh
/bin/csh
/usr/local/bin/zsh

#次に、chshコマンドで実際にzshをログインシェルに設定します。
chsh -s `which zsh`

#テーマをsteeefに変更
vi ~/.zshrc
ZSH_THEME="steeef"

#シェルがzshになったか確認
echo $SHELL
#なっていなかったらログアウトして、再度ログイン

#gitのバージョンアップ
sudo yum -y remove git #これまでのコマンドではいってしまったgitをアンインストール
sudo yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker
sudo yum -y install zlib-devel.x86_64
sudo yum -y install perl-ExtUtils-MakeMaker
mkdir -p ~/work/git
cd ~/work/git
wget https://www.kernel.org/pub/software/scm/git/git-2.3.2.tar.gz
tar -zxf git-2.3.2.tar.gz
cd git-2.3.2
sudo make prefix=/usr/local all
sudo make prefix=/usr/local install
git --version
#pathが通っていないので、zsh: command not foundと言われる。.zshrcのexport PATH=$HOME/bin:/usr/local/bin:$PATHをコメントアウト
vi ~/.zshrc
#.zprofileに以下を追加
vi ~/.zprofile
export PATH=$PATH:$HOME/bin:/usr/sbin:/sbin:/usr/local/sbin:

#tmuxのインストール
#まだはいっていなければインストール
sudo yum -y install wget gcc make
sudo yum -y install ncurses ncurses-devel
#tmuxのコンパイルの為のlibeventのインストール
mkdir -p ~/work/tmux
cd ~/work/tmux
sudo wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar xvzf libevent-2.0.21-stable.tar.gz
cd libevent-2.0.21-stable
./configure
make
sudo make install
#もしかしたらrootにならないとだめかも
sudo su
sudo echo "/usr/local/lib" > /etc/ld.so.conf.d/libevent.conf
sudo ldconfig
#tmuxのインストール
wget http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz
tar xvzf tmux-1.9a.tar.gz
cd tmux-1.9a
./configure
sudo make
sudo make install
#tmuxの設定ファイルを編集する
vim ~/.tmux.conf
#以下を追加
# Prefix key
# unbind C-b
# set -g prefix C-t
# bind C-t send-prefix
# # reload config
# bind C-r source-file ~/.tmux.conf \; display "~/.tmux.conf is reloaded!"

##【.tmux.conf】######################################
# KeyBindings
# "bind -r"はrepeat-timeで指定したミリ秒再度Prefixを押さずに入力可能にできる。
# "bind -n"はPrefix(Ctrl+t)が不要になる。
# "bind -t"はkeyはkey-table内に割り当てられる。

# Prefixを＜Ctrl + b＞から＜Ctrl + t＞に変えます。
# 例：新しいウィンドウを開くときは＜Ctrl + t＞＜c＞と押すことになります。
# "t"以外の好きなキーにしても問題ありません。他の操作と重複しないようにしましょう。
set-option -g prefix C-t

# デフォルトのPrefix(C-b)を解除
unbind C-b

#全てのベルを無視
set-option -g bell-action none

# 256色端末を使用する
set -g default-terminal "screen-256color"

# 下記の設定をしておいたほうがEscの効きがいいらしい
set -s escape-time 0

# ウィンドウ履歴の最大行数
set-option -g history-limit 10000

# Option
# utf8有効
set-window-option -g utf8 on
# ステータスバーを Utf-8 に対応
set-option -g status-utf8 on
# コピー、選択モードのキーバインドvi/emacs
set-window-option -g mode-keys vi

# 画面ドラッグ時にコピーモードにする
setw -g mode-mouse on
# マウスでペインを選択できるようにする
set-option -g mouse-select-pane on
set -g mouse-select-pane on
# マウスでリサイズできるようにする
set -g mouse-resize-pane on
# マウスでウィンドウを切り替えられるようにする
set -g mouse-select-window on
# ウィンドウのインデックスを1から始める
set-option -g base-index 1
# ペインのインデックスを1から始める
setw -g pane-base-index 1
# ウィンドウの自動リネームoff
set-window-option -g automatic-rename off

# View
## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
##ウィンドウで動作があるとステータスラインでハイライト
set-window-option -g monitor-activity on
set -g visual-activity on

# ステータスライン更新間隔(秒)
set -g status-interval 1
set -g status-left-length 50
set -g status-right-length 100

set-option -g set-titles on
# www1.hoge.com→www1のみ表示。
set-option -g set-titles-string "@#(hostname | sed 's/\\\\..*//')"

# ステータスバーの色を設定する
set -g status-bg black
set -g status-fg white

# ステータスラインカスタム関連
set -g status-attr bright
# 左部:whoami@hostname
set -g status-left '#[fg=green,bold][#20(whoami)]#[default]'
# set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
# 右部:[LANG, 起動時間, ロードアベレージ, メモリ使用率, 現在時刻]
set -g status-right '[ #[fg=white,bold]#(echo $LANG)#[default] < #[fg=blue]up #(pc-running-time)#[default] < #[fg=magenta](#(loadaverage)) Mem #(used-mem)%%#[default] < #[fg=red,bold]%y/%m/%d(%a)%H:%M:%S#[default] ]'


# コマンドラインの色を設定する
set -g message-attr bold
set -g message-fg white
# コマンドラインの補完候補の色
set -g message-bg red

# ペインボーダーの色を設定する
set -g pane-border-fg white
set -g pane-border-bg black
# アクティブなペインをボーダーの色を変えて目立たせる
# set -g pane-active-border-fg cyan
# set -g pane-active-border-fg colour247
# 群青色
# set -g pane-active-border-fg colour129
# 黄緑
# set -g pane-active-border-fg colour190
# 黄色
# set -g pane-active-border-fg colour230
# 灰色
# set -g pane-active-border-fg colour240
# 薄い赤色
set -g pane-active-border-fg colour220
set -g pane-active-border-bg black

set-window-option -g mode-bg white
set-window-option -g mode-fg black

# ウィンドウリストの色を設定する
set-window-option -g window-status-bg black
# setw -g window-status-bg default
set-window-option -g window-status-fg white
setw -g window-status-attr dim

# ウィンドウリスト現在のウィンドウの色の設定
set-window-option -g window-status-current-bg green
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-attr bold

#
# キーバインド（コピーモード）
#
#コピーモード開始
bind Space copy-mode
bind p paste-buffer
# vでマーク開始
bind -t vi-copy v begin-selection
# Vで行の先頭からマーク開始
bind -t vi-copy V select-line
# C-vで矩形選択の切り替え
bind -t vi-copy C-v rectangle-toggle
# yでヤンク
bind -t vi-copy y copy-selection
# Yで1行ヤンク
bind -t vi-copy Y copy-line

# 設定リロード
bind r source-file ~/.tmux.conf
# ウィンドウ選択画面
bind Space choose-window
# ペイン番号表示
bind i display-panes

# ウィンドウの移動
# Prefix(ここではCtrl+t)を連続入力することでウィンドウを移動させます。
bind C-t next-window
bind -r C-n next-window
bind -r C-p previous-window

# 分割していたペインそれぞれをWindowに
bind b break-pane

# ウィンドウタイトル変更 A
bind A command-prompt "rename-window %%"

# ペイン終了
bind k kill-pane
# ウィンドウ終了
# bind K kill-window

# ウィンドウを(ペインに)分割
# ＜Prefix＞＜v＞、＜Prefix＞＜h＞と入力するだけで分割できるようにします。
unbind '"'
unbind '%'
unbind v
unbind h
unbind '\'
unbind '|'
unbind '-'
bind v split-window -v
bind h split-window -h
bind '\' split-window -h
bind '|' split-window -h
bind '-' split-window -v

# ペインのサイズ変更をvim風にする
# ＜Prefix＞＜Ctrl + { h | i | j | k }＞
# ＜Ctrl + { h | i | j | k }＞は連続して入力可能。
# 1回押すごとに1行(列)境界を移動させる。
bind -r C-h resize-pane -L 1
bind -r C-l resize-pane -R 1
bind -r C-j resize-pane -D 1
bind -r C-k resize-pane -U 1

# ペインの移動1(Vim風にする)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# ペインの移動2
# Shift + 上下左右でペインを移動できるようにする。(＜Prefix＞不要)
# 行頭に"bind -n"をつけるとPrefixが不要になる。
bind -n S-left select-pane -L
bind -n S-down select-pane -D
bind -n S-up select-pane -U
bind -n S-right select-pane -R

##################

#tmux起動
tmux
#.zprofileに以下を追加
# TMUX Settings
if [ -z $TMUX ]; then
  if $(tmux has-session); then
    tmux attach
  else
    tmux
  fi
fi
#tmuxの使い方
tmux #で起動
# 新しいウィンドウを開く ＜Ctrl + t＞＜c＞ ※ "Ctrl"を押しながら"t"を押して離す。続けて"c"を押す。
# アクティブかどうかはウィンドウ名右の"-"、"*"を見て判断します。
# ウィンドウの移動 ＜Ctrl + t＞＜p＞ 又は ＜Ctrl + b＞＜n＞
# ウィンドウを横に分割 ＜Ctrl + t＞＜"＞
# ウィンドウを縦に分割 ＜Ctrl + t＞＜%＞
# ウィンドウ内のペインを確認
# ＜Ctrl + t＞:display-panes
# ※ "Ctrl"を押しながら"t"を押して離す。続けて":display-panes"と入力してEnter。
# ※ ":"まで入力した時点でウィンドウの最下部に文字列が入力できるようになります。
# 操作を忘れた場合は下記でコマンドのリストを表示することができます。
# ＜Prefix＞＜?＞
# 時間の表示
# ＜Ctrl + t＞＜t＞


#rbenvをインストールする為の準備
#sudoers の設定
sudo visudo -f /etc/sudoers.d/00_base
#以下2行を追加
Defaults !secure_path
Defaults env_keep += "PATH RBENV_ROOT"

#rbenvをシステムワイドにインストール
cd /usr/local
sudo git clone git://github.com/sstephenson/rbenv.git rbenv

#ruby-buildインストール
sudo mkdir /usr/local/rbenv/plugins
cd /usr/local/rbenv/plugins
sudo git clone git://github.com/sstephenson/ruby-build.git
cd ruby-build
sudo ./install.sh #なにも表示されない。。。けどちゃんと処理してるから大丈夫

#rbenvのディレクトリを作成
sudo mkdir /usr/local/rbenv/shims /usr/local/rbenv/versions
#rbenvグループを追加
sudo groupadd rbenv
#/usr/local/rbenvを再起的にrbenvグループに変更
sudo chgrp -R rbenv /usr/local/rbenv
#/usr/local/rbenvを再起的に権限変更
sudo chmod -R g+rwxXs /usr/local/rbenv


#パスを通す。
sudo vi /etc/profile.d/rbenv.sh
#以下3行を追加
export RBENV_ROOT="/usr/local/rbenv"
export PATH="/usr/local/rbenv/bin:$PATH"
eval "$(rbenv init -)"
#設定値を反映
source /etc/profile

#rubyのインストール
#ここからsudo suしないとエラーになる
#このときrootであることに注意(一般ユーザでsudo rbenv install 2.0.0-p0とすると/root/.rbenv/下にインストールされ共有できない).
rbenv install -l
sudo rbenv install 2.2.1
sudo rbenv global 2.2.1
sudo rbenv rehash

#bundlerだけはコマンドラインでインストールする。
sudo gem install bundler
sudo rbenv rehash
#バージョン確認
bundle -v
#bundleのインストール先確認
/usr/local/rbenv/versions/2.2.0/bin/bundler -v #Bundler version 1.8.3とでる

bundle -v　#そんなコマンドないと言われる。
vi ~/.bash_profile　#の$PATHに以下を追加
vi ~/.zprofile     #zsh使ってる場合はこっち。$PATHに以下を追加
/usr/local/rbenv/versions/2.2.0/bin


#.zprofileの編集
vi ~/.zprofile
#以下の行を追加してpathを通して、vimとかprofile.dにかいたrbenvとかを使えるようにする
for i in /etc/profile.d/*.sh ; do
    [ -r $i ] && source $i
done
export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/rbenv/versions/2.2.0/bin

#一度ログアウトして、再度ログイン

#pathの確認
echo $PATH
#結果、以下のような感じになってればOK。:/usr/local/binがふたつあるのが気になる。
/home/vagrant/bin
:/usr/local/bin
:/usr/local/rbenv/shims
:/usr/local/rbenv/bin
:/usr/local/bin
:/bin
:/usr/bin
:/usr/local/sbin
:/usr/sbin
:/sbin
:/usr/local/rbenv/versions/2.2.0/bin


###################################

#vimのインストール###################################
#めんどくさい人はこれ
#sudo yum -y install vim

#vim7.4をインストールする場合
#vimのバージョン確認
yum list installed | grep vim
#結果、vim-minimal.x86_64     2:7.2.411-1.8.el6

#以下のコマンドで必要なパッケージがインストールされているか確認
sudo yum list installed | grep mercurial
sudo yum list installed | grep ncurses-devel
sudo yum list installed | grep make
sudo yum list installed | grep gcc

#インストールされていない場合はそれぞれインストール。
# sudo yum -y install mercurial
# sudo yum -y install ncurses-devel
# sudo yum -y install make
# sudo yum -y install gcc
sudo yum -y install mercurial ncurses-devel make gcc

#vimのインストール 参考：http://qiita.com/SOJO/items/9d6a65f3da941c49da36
cd /usr/local/src
#vimディレクトにクローンする。
sudo hg clone https://vim.googlecode.com/hg/ vim
#vimディレクトに移動する。
cd /usr/local/src/vim
#最新版がなにか確認する
sudo hg pull
#configureコマンドを使ってMakefileを生成して、make して　make install
sudo ./configure --with-features=huge --enable-multibyte --disable-selinux
sudo make
sudo make install
#これで完了 バージョン確認
vim --version

#プラグイン管理ツールをインストール
mkdir -p ~/.vim/bundle
git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim

#vim設定ファイルの編集　参考：https://github.com/dai---/memo/blob/master/development/dotfile/Mac/.vimrc
vi ~/.vimrc
#vimを起動して、プラグインをインストールするか聞かれるので、「y」を入力する
vim

###################################





#~/.bashrc　or ~/.zshrcに以下を追加
alias viv='vi ~/.vimrc'
alias setv='source ~/.vimrc'
alias vib='vi ~/.bashrc'
alias setb='source ~/.bashrc'
alias viz='vi ~/.zshrc'
alias setz='source ~/.zshrc'
alias be='bundle exec'
alias berc='bundle exec rails c'
alias bedb='bundle exec rails db'
alias bers='bundle exec rails s -b 192.168.33.10'
alias bean='bundle exec annotate'
alias berr='bundle exec rake routes'


#アプリケーションを作成
mkdir /work/test/
cd /work/test/
bundle init
vi Gemfile #railsのコメントアウトを外す。
bundle install --path vendor/bundle

たまに
#An error occurred while installing rails-deprecated_sanitizerみたいなエラーがでるが
#gemのサーバーが落ちてるだけみたい。
#再度bundle install したら上手くいった。
bundle install --path vendor/bundle

#railsアプリケーションのひな形作成
bundle exec rails new .
bundle exec rails new . -d mysql

#Gemfileのtherubyracerのコメントアウトを外す
bundle install

mysql -u root -p　#でmysqlに接続
mysql> create user <rails_app_name>@localhost identified by '<password>';
mysql> grant all on <rails_app_name>_development.* to <rails_app_name>@localhost;
mysql> grant all on <rails_app_name>_test.* to <rails_app_name>@localhost;
#ユーザーが作成されたか確認
mysql> select Host, User, Password from mysql.user;
mysql> exit

#railsのデータベースの設定を修正(username: ←に半角がないとエラーになる)
vi config/database.yml

development:
  〜
  username: <rails_app_name>
  password: <password>
  〜
test:
  〜
  username: <rails_app_name>
  password: <password>

#bundle installしてmysql2のエラーがでた場合は
sudo yum -y install mysql-devel

#データベース作成(development/test/productionのすべてを作成)
bundle exec rake db:create:all
bundle exec rake db:create
#rake db:create はこんなクエリで <rails_app_name>_development と <rails_app_name>_test データベースを作ってます。
#CREATE DATABASE `<rails_app_name>_development` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`
#CREATE DATABASE `<rails_app_name>_test` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`

#作成したデータベースの消去
#bundle exec rake db:create:all

#railsサーバー起動
bundle exec rails s -b 192.168.33.10 -p 3100


#gitで管理
#githubに鍵を登録する為に公開鍵と秘密鍵のペアを作成
cd ~/.ssh
ssh-keygen -t rsa -C "vagrant@example.com"
#Enter3回押せばOK
cat　id_rsa.pub #で表示された公開鍵をgithubに登録

#railsのルートディレクトリで
git init
vi .gitignore
#/vendor/bundle
#/vendor/bundler を追加
git config --global user.name "dai"
git config --global user.email example@gmail.com
git add .
git commit -m "first commit"
#githubのプッシュ先を設定。
git remote add origin git@github.com:dai---/dai-rails-study.git
git pull origin master #githubでリポジトリを作成した際に勝手に作成されたreadmeとかをダウンロード
git push origin master #でエラーにった場合、githubに正常に公開鍵が登録できていない。

#開発はそれぞれのブランチでやること。
git branch windows
git branch mac


##########################################################################

##【サンプルアプリケーション】####################################################################

bundle exec rails g scaffold ItemGroup name:string
bundle exec rails g scaffold Item  name:string value:integer item_group:references

##########################################################################

##【sql】####################################################################

CREATE TABLE db_name.app_groups (
                                  id int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
                                  FOREIGN KEY (co_id) REFERENCES cos(id)
                                  status int(11),
                                  name varchar(255),
                                  created_at datetime NOT NULL,
                                  updated_at datetime NOT NULL,
                                  deleted_at datetime,
                                  FOREIGN KEY (operator_id) REFERENCES operator(id)
                               );

CREATE TABLE db_name.app_groups (
                                  id int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
                                  co_id int(11),
                                  status int(11),
                                  name varchar(255),
                                  created_at datetime NOT NULL,
                                  updated_at datetime NOT NULL,
                                  deleted_at datetime,
                                  operator_id int(11),
                                  FOREIGN KEY (co_id) REFERENCES cos(id),
                                  FOREIGN KEY (operator_id) REFERENCES operator(id)
                               ) ENGINE=InnoDB;

##########################################################################


##【WEBRick起動の仕方】####################################################################

rails server -p80 -d

##########################################################################




