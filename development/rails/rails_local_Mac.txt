
################################################
# Developer Toolsのインストール
################################################
# Xcodeのバージョンアップ
①Xcodeを開いて上のXcode->Open Developer Tool->More Developer Toolsを選択。
するとAppleDeveloperのサイトに飛びますので（Developer登録が必要）そこから
CategoriesのDeveloper Toolsにチェックを入れ、CommandLineToolsをインストールします。

②Xcodeをインストールしてターミナルから以下を入力。
$ xcode-select --install

################################################


################################################
# homebrewのインストール
################################################

# Homebrewの用語で次の2つは覚えておきましょう。
・Celler  パッケージのインストール先   /usr/local/Celler
・Formula ビルド手順が書かれたスクリプト /usr/local/Library/Formula

# 環境変数の確認
# Homebrewでインストールしたパッケージは /usr/local/Celler にインストールされ、
# /usr/local/bin にシンボリックリンクが作られます。
# そのため、環境変数のPATHで /usr/local/bin を優先させなければいけません。
$ echo $PATH

$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"

# コマンドラインツールがない場合はインストールを促すポップアップが表示される

# バージョンの確認
$ brew --version

# Homebrewのシステム設定を表示
$ brew --config

# brewのアップデート
# Homebrew本体とFormulaを更新 (パッケージは更新されない)
$ brew update

# パッケージを再ビルドする (Formula省略時は更新があるパッケージを全てビルド)
$ brew upgrade [Formula]

# インストールした特定のFormulaeの古いバージョンをCellarから削除する（Formula省略時は全て）
$ brew cleanup [Formula]

# 問題がないかチェックする
$ brew doctor
# →Your system is ready to brew.と表示されれば問題ない

# 更新のあるFormulaを確認
$ brew outdated

# パッケージを更新対象から除外
# brew upgrade で Formula を省略をすると全てのパッケージが更新されますが、バージョンを上げたくないパッケージがある場合に使います。
$ brew pin [Formula]

# 更新対象に戻したい場合は unpin を使います。
$ brew unpin [Formula]

# シンボリックリンク作成
$ brew link [Formula]
# インストールしたFormulaのシンボリックリンクが作成されなかった場合などに使いますが、Worningが表示されて作成出来なかったら --force オプションを付けて実行します。
Warning: openssl is keg-only and must be linked with --force
...
$ brew link openssl --force

# シンボリックリンクを削除するには unlink を使います。
$ brew unlink [Formula]

# インストール可能なFormulaを検索 (Formula省略時は全て表示)
$ brew search [Formula]

# インストールされているパッケージ一覧 (Formula省略時は全て表示)
$ brew list [Formula]

# zshのインストール
# Mac の場合、zsh起動時にPATHが書き換えられてしまうという問題があるので、
# "--disable-etcdir"オプションを付加してインストールします。
$ brew install --disable-etcdir zsh

# oh-my-zshのインストール
# https://github.com/robbyrussell/oh-my-zsh
# から公式のやり方を確認

# vi ~/.zshrc
# plugins=(git ruby osx bundler brew rails emoji-clock)
# を追加

# Homebrew-caskを使ってMacのGUIアプリケーションを管理する
$ brew install caskroom/cask/brew-cask

# Homebrew-versions
# Homebrew-caskでバージョン指定する為に必要
# 例えば、firefoxなどはこれがないと英語版がインストールされたりする。
$ brew tap caskroom/versions

# $ brew cask search <app-name>でインストール可能なアプリを検索できます。引数なしで実行すると全件取得されます。

# GUIアプリのインストール
$ brew cask install <app-name>でアプリをインストールします。
# 例：brew cask install google-earth

# GUIアプリのアンインストール
$ brew cask uninstall <app-name>でアプリをアンインストールします。

# インストールしたGUIアプリの一覧
$ brew cask list

# インストール先について
# アプリは/opt/homebrew-cask/Caskroom配下にインストールされ、~/Applicationsに格納されるのはシンボリックリンクになります。
# また、ダウンロードした.dmgファイルなどは/Library/Caches/Homebrew/Casksにあります。

# ダウンロードしたファイルの削除
# brew cask cleanupコマンドを使うことで不要なダウンロードファイルなどを削除してくれます。
$ brew cask cleanup

# コードスニペット
brew cask install atext
# 動画再生ソフト
brew cask install vlc
# 解凍ソフト
brew cask install the-unarchiver

################################################
# iTerm2の使い方







################################################
# zshのインストール
################################################



################################################


################################################
# oh-my-zshのインストール
################################################


################################################
# zplugとpreztoのインストール @macOS
################################################
brew install zplug



~/.zshrc内へ追記

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh

zplug "sorin-ionescu/prezto"




zshを再起動して

$ zplug install
symbolik linkをはる。

$ ln -s /usr/local/opt/zplug/repos/sorin-ionescu/prezto $HOME/.zprezto
これより，.zshrc, .zlogin, .zlogout, .zprofile, .zshenvが上書きされてしまうため必要なら退避させておく。

preztoのインストール手順に従い，

$
setopt EXTENDED_GLOB
for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
  ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
done

ファイルが既に存在するてきなエラーが表示されたら，そのファイルを消しておく。
さっきせっかく書いた.zshrcも消されてしまうので，同様のないようを再生成された.zshrcに書き込む。




zplug "mollifier/anyframe"
zplug 'mollifier/anyframe', \
    use:'anyframe-functions/{actions,selectors,sources,widgets}/*', lazy:true
zle -N anyframe-widget-cd-ghq-repository
# ...
bindkey '^x^g' anyframe-widget-cd-ghq-repository
# ...


zplug "mollifier/cd-gitroot"

zplug "stedolan/jq", from:gh-r, as:command \
    | zplug "b4b4r07/emoji-cli", if:"which jq"

zplug "b4b4r07/enhancd", of:enhancd.sh

zplug "zsh-users/zsh-history-substring-search", do:"__zsh_version 4.3"

# compinit 以降に読み込むようにロードの優先度を変更する
zplug "zsh-users/zsh-syntax-highlighting", defer:2

zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-completions", use:'src/_*', lazy:true

zplug "zsh-users/zsh-autosuggestions"

zplug "chrissicool/zsh-256color"

# 必要ならばアーキテクチャ指定
zplug "peco/peco", as:command, from:gh-r, of:"*amd64*"

################################################
テーマ確認
prompt -l
Currently available prompt themes:
agnoster cloud damoekri giddie kylewest minimal nicoulaj paradox
peepcode powerlevel9k powerline pure skwp smiley sorin steeef
adam1 adam2 bart bigfade clint default elite2 elite fade fire
off oliver pws redhat restore suse walters zefram


prompt -p steeef

################################################
# rickyをインストール
################################################

$ brew tap sanemat/font
$ brew install ricty
or
$ brew install ricty --with-powerline

$ cp -f /usr/local/opt/ricty/share/fonts/Ricty*.ttf ~/Library/Fonts/
$ fc-cache -vf


################################################
# pecoのインストール
################################################
brew tap peco/peco
brew install peco

vim ~/.zshrc で以下を追加

function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

################################################


################################################
# The Silver Searcherのインストール
################################################

brew install ag

################################################

# zshプラグインの設定
# zsh-syntax-highlightingを設定する
cd ~/.oh-my-zsh/custom/plugins
git clone git://github.com/zsh-users/zsh-syntax-highlighting.git
# .zshrcのpluginsにzsh-syntax-highlightingを追加します
# plugins=(git ssh-agent ruby gem zsh-syntax-highlighting)

# よく使うディレクトリをブックマークする zsh のプラグイン(cd-bookmark)
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/mollifier/cd-bookmark.git
# .zshrcに以下を追加
###########################################################
# よく使うディレクトリをブックマークする zsh のプラグイン(cd-bookmark)の設定
###########################################################
fpath=($HOME/.oh-my-zsh/custom/plugins/cd-bookmark(N-/) $fpath)
autoload -Uz cd-bookmark
alias cdb='cd-bookmark'
alias cdba='cd-bookmark -a'
alias cdbl='cd-bookmark -l'
alias cdbe='cd-bookmark -e'
# cdba root でカレントディレクトリをrootという名前で登録
# cdb root でrootに登録したパスに移動できる
# cdbで登録されている一覧を表示する
# cdblで登録されているブックマーク一覧を表示する(上と同じ)
# cdbeで登録されているブックマークを管理しているファイルをviで編集できる
# cdb -hでヘルプを参照
###########################################################

# <app_root>ディレクトリにコマンド一発で移動するプラグイン(cd-gitroot)
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/mollifier/cd-gitroot.git
# .zshrcに以下を追加
###########################################################
# <app_root>ディレクトリにコマンド一発で移動するプラグイン(cd-gitroot)の設定
###########################################################
fpath=($HOME/.oh-my-zsh/custom/plugins/cd-gitroot(N-/) $fpath)
autoload -Uz cd-gitroot
alias cdroot='cd-gitroot'
###########################################################


################################################
#
################################################



################################################


################################################
# rubyのインストール
################################################
rbenv install -l
sudo rbenv install 2.2.3

mkdir ~/work/rails_app/
cd ~/worl/rails_app

bundle init

# railsのコメントアウトを外す。
vi Gemfile

bundle install --path vendor/bundle

#railsアプリケーションのひな形作成
bundle exec rails new .
bundle exec rails new . --skip-bundle -d mysql


################################################


################################################
#
################################################



################################################
################################################
#
################################################



################################################
